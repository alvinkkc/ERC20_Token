{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions.  * By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}.  * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
			"methods": {
				"constructor": {
					"details": "Initializes the contract setting the deployer as the initial owner."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.    * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/IBEP20/BEP20.sol": "Ownable"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/IBEP20/BEP20.sol": {
			"keccak256": "0x9731211a3c4cffaf1604cd6ac6881a0b0534549075edb0ecb02c3ef068e79962",
			"urls": [
				"bzz-raw://3843f59c998b72ea214e50338bfacfbf85baaa8762d9ecf082fe0b5852e76c21",
				"dweb:/ipfs/QmPSYg8o4hUeugCrL99bj1rzswmxwqxMroS7LPZK5jsxFL"
			]
		},
		"contracts/IBEP20/IBEP20.sol": {
			"keccak256": "0x01efb32c208a110a1d2a4138c5c1009f858ac0fb38708c75e4f70e7ba389ab63",
			"urls": [
				"bzz-raw://8901550c655babbb0c522099ef628519eb309f9d3c161c4f107fd33012d3a3f5",
				"dweb:/ipfs/QmZK8eUdPGx9P3oh47C3kcvjKrZRoXJEtHaaiM3fFM4FRV"
			]
		},
		"contracts/IBEP20/utils/Context.sol": {
			"keccak256": "0x8be1c589cc3e8abed41ddcdfc9afd6f6301236f48e39f9768de822d786d79ce0",
			"urls": [
				"bzz-raw://e6b8c73e3677e7c15dec8b6a3e2a45d9287b871db36c070ca842b32e9fbe6a53",
				"dweb:/ipfs/QmZo5H7EHN95DuM8AnqiUJPeZ8MZ8MJjawoNTQvxwnfDcH"
			]
		},
		"contracts/IBEP20/utils/SafeMath.sol": {
			"keccak256": "0x8defd56263620d4fb0df2afef4a876adbea143c5f319774adb27ec640665977c",
			"urls": [
				"bzz-raw://d629410408c8f7a8ee94d3714b8b2179d14a145da18a71178504aed29bc5ab09",
				"dweb:/ipfs/QmckoM5wE2XRMPkAeDWbw325APQmPC5CMBkcudw2RcFMgW"
			]
		}
	},
	"version": 1
}